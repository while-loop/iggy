package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	"time"
)

var (
	appendIgnores = flag.Bool("a", false, "append ignores to current file")
	ignoreHeader  = []string{"## This .gitignore file was generated by iggy (https://github.com/while-loop/iggy).",
		"## Changes to this file may be overwritten.", ""}
)

func main() {
	flag.Parse()

	if len(flag.Args()) <= 0 {
		perr("No ignore types given")
	}

	client := &http.Client{Timeout: 5 * time.Second}
	ignores, err := GetIgnoreUrls(client, flag.Args())
	if err != nil {
		perr(err.Error())
	} else if len(ignores) <= 0 {
		return
	}

	lines, err := GetIgnores(client, ignores)
	if err != nil {
		perr(err.Error())
	}

	saveIgnore(lines, *appendIgnores)
}

func saveIgnore(lines []string, appendIgnores bool) {
	flags := 0
	if appendIgnores {
		flags = os.O_APPEND
	} else {
		lines = append(ignoreHeader, lines...)
		flags = os.O_TRUNC
	}

	f, err := os.OpenFile(".gitignore", os.O_WRONLY|os.O_CREATE|flags, 0644)
	if err != nil {
		perr(fmt.Sprint("Unable to open .gitignore file", err))
	}
	defer f.Close()
	AddIgnores(f, lines)
}

func perr(msg string) {
	fmt.Fprintln(os.Stderr, msg)
	os.Exit(1)
}
